<?xml version="1.0" encoding="UTF-8"?>
<project name="selenium-server" default="build" basedir=".">
	<property name="source" value="."/>
	<property environment="env"/>
	<property name="buildpath" value="${basedir}/build"/>

	<!-- Detect the Target OS -->
	<condition property="isLinuxUbuntu">
		<os name="Linux"/>
	</condition>
	<condition property="isMacOsX">
		<and>
			<os family="mac"/>
			<os family="unix"/>
		</and>
	</condition>

	<!-- Obviously we need Git repo to exist in the current directory -->
	<available file=".git" type="dir" property="git.present"/>

	<target name="print.default.properties">
		<echo message="os.name:          ${os.name}"/>
		<echo message="os.version:       ${os.version}"/>
		<echo message="os.arch:          ${os.arch}"/>
		<echo message="basedir:          ${basedir}"/>
		<echo message="ant.file:         ${ant.file}"/>
		<echo message="ant.project.name: ${ant.project.name}"/>
		<echo message="ant.java.version: ${ant.java.version}"/>
	</target>

	<!-- Extract the software version -->
	<target name="selenium.version" description="Extract Selenium Server version">
		<exec executable="bash" outputproperty="selenium.version" failonerror="true">
			<arg value="-c"/>
			<!-- sed command explanation: Delete everything up to, and including a dash. Deletes a dot and consequent non-dot characters up to the end of the line -->
			<arg value="echo $(basename $(ls -1 '${basedir}/src/')) | sed 's/.*-//;s/\.[^.]*$//'"/>
		</exec>
		<echo message="${selenium.version}"/>
	</target>

	<!-- Clean up -->
	<target name="clean" description="Clean up any old build artifacts">
		<delete dir="${buildpath}"/>
	</target>


	<!-- #################### MacOsX Build section #################### -->
	<target name="build.macosx" description="Build the Mac Os X Package" if="isMacOsX" depends="check.pkg.maker">
		<echo>Building for Mac OS X</echo>
		<property name="projectbuildpath" value="${buildpath}/${ant.project.name}-${selenium.version}"/>

		<!-- Create the Build directories -->
		<mkdir dir="${projectbuildpath}"/>

		<antcall target="build.pkg"/>
	</target>

	<target name="check.pkg.maker" description="Check if PackageMaker application exists">
		<exec executable="bash" outputproperty="PackageMakerApp" failonerror="true">
			<arg value="-c"/>
			<arg value="mdfind 'kMDItemCFBundleIdentifier == com.apple.PackageMaker'"/>
		</exec>
		<condition property="PackageManagerExist">
			<equals arg1="${PackageMakerApp}" arg2="/Applications/PackageMaker.app" casesensitive="true"/>
		</condition>
	</target>

	<target name="build.pkg" if="PackageManagerExist" depends="git.export.macosx">
		<property name="PackageManagerExe" value="${PackageMakerApp}/Contents/MacOS/PackageMaker"/>
		<property name="PackageNameVersion" value="${ant.project.name}-${selenium.version}.pkg"/>

		<echo message="${PackageManagerExe}"/>
	</target>

	<!-- Export the source from git working copy for building debian package -->
	<target name="git.export.macosx" description="Export Git source folder" if="git.present">
		<exec executable="bash" outputproperty="git.export.build" failonerror="true">
			<arg value="-c"/>
			<arg value="git archive HEAD src macosx | ( cd ${projectbuildpath} &amp;&amp; tar -xf - ) &amp;&amp; echo 'Exported into ${projectbuildpath}'"/>
		</exec>
		<echo message="${git.export.build}"/>
	</target>
	<!-- #################### MacOsX Build section #################### -->


	<!-- #################### Linux Build section #################### -->
	<target name="build.linux" if="isLinuxUbuntu">
		<echo>Building for Ubuntu</echo>
		<property name="projectbuildpath" value="${buildpath}/${ant.project.name}-${selenium.version}"/>
		<property name="projectorigpath" value="${buildpath}/${ant.project.name}-${selenium.version}.orig"/>

		<!-- Create the Build directories -->
		<mkdir dir="${projectbuildpath}"/>
		<mkdir dir="${projectorigpath}"/>

		<antcall target="build.deb"/>
	</target>


	<!-- Export the source from git working copy for building debian package -->
	<target name="git.export.debian" description="Export Git source folder" if="git.present">
		<exec executable="bash" outputproperty="git.export.orig" failonerror="true">
			<arg value="-c"/>
			<arg value="git archive HEAD src | ( cd ${projectorigpath} &amp;&amp; tar -xf - ) &amp;&amp; echo 'Exported into ${projectorigpath}'"/>
		</exec>
		<echo message="${git.export.orig}"/>

		<exec executable="bash" outputproperty="git.export.build" failonerror="true">
			<arg value="-c"/>
			<arg value="git archive HEAD src *.diff.gz | ( cd ${projectbuildpath} &amp;&amp; tar -xf - ) &amp;&amp; echo 'Exported into ${projectbuildpath}'"/>
		</exec>
		<echo message="${git.export.build}"/>
	</target>

	<!-- Apply the Debian patch file -->
	<target name="patch.debian" description="Apply the Debian patch to the original source" depends="git.export.debian">
		<exec executable="bash" outputproperty="patch.result" failonerror="true">
			<arg value="-c"/>
			<arg value="cd ${projectbuildpath} &amp;&amp; zcat *.diff.gz | patch -p1 &amp;&amp; rm *.diff.gz"/>
		</exec>
		<echo message="${patch.result}"/>
	</target>

	<!-- Debianise the Source code -->
	<target name="build.deb" depends="patch.debian">
		<exec executable="bash" dir="${basedir}" failonerror="true">
			<arg value="-c"/>
			<arg value="cd ${projectbuildpath} &amp;&amp; debuild -i -us -uc"/>
		</exec>
	</target>
	<!-- #################### Linux Build section #################### -->

	<!-- Build everything -->
	<target name="build" depends="print.default.properties, clean, selenium.version, build.linux, build.macosx"/>
</project>
